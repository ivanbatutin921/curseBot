package bot

import (
	"cursebot/internal/repository"
	"fmt"
	"log"
	"strconv"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"github.com/PaulSonOfLars/gotgbot/v2/ext/handlers"
)

type Bot struct {
	bot       *gotgbot.Bot
	repo      repository.Repository
	channelID string
	keyboards *Keyboards
}

func NewBot(bot *gotgbot.Bot, repo repository.Repository, channelID string) *Bot {
	return &Bot{
		bot:       bot,
		repo:      repo,
		channelID: channelID,
		keyboards: NewKeyboards(),
	}
}

func (b *Bot) Start() error {
	dispatcher := ext.NewDispatcher(&ext.DispatcherOpts{
		Error: func(b *gotgbot.Bot, ctx *ext.Context, err error) ext.DispatcherAction {
			log.Printf("Error handling update: %v", err)
			return ext.DispatcherActionNoop
		},
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
	dispatcher.AddHandler(handlers.NewCommand("start", b.handleStart))
	dispatcher.AddHandler(handlers.NewCommand("help", b.handleHelp))
	dispatcher.AddHandler(handlers.NewCommand("course", b.handleCourse))

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è callback'–æ–≤
	dispatcher.AddHandler(handlers.NewCallback(nil, b.handleCallbackQuery))

	updater := ext.NewUpdater(dispatcher, &ext.UpdaterOpts{
		ErrorLog: nil,
	})

	err := updater.StartPolling(b.bot, &ext.PollingOpts{
		DropPendingUpdates: true,
		GetUpdatesOpts: &gotgbot.GetUpdatesOpts{
			Timeout: 60,
			AllowedUpdates: []string{
				"message",
				"callback_query",
			},
		},
	})
	if err != nil {
		return fmt.Errorf("failed to start polling: %w", err)
	}

	log.Printf("Bot %s started", b.bot.User.Username)
	updater.Idle()
	return nil
}

func (b *Bot) handleStart(bot *gotgbot.Bot, ctx *ext.Context) error {
	channelID, _ := strconv.ParseInt(b.channelID, 10, 64)
	chatMember, err := bot.GetChatMember(channelID, ctx.EffectiveUser.Id, nil)

	var text string
	if err != nil {
		log.Printf("Error getting chat member: %v", err)
		text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
	} else {
		status := chatMember.GetStatus()
		log.Printf("User %d subscription status: %s", ctx.EffectiveUser.Id, status)

		switch status {
		case "member", "administrator", "creator":
			text = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:", ctx.EffectiveUser.FirstName)
			_, err = ctx.EffectiveMessage.Reply(bot, text, &gotgbot.SendMessageOpts{
				ParseMode: "Markdown",
				ReplyMarkup: gotgbot.InlineKeyboardMarkup{
					InlineKeyboard: [][]gotgbot.InlineKeyboardButton{{
						{
							Text:         "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ",
							CallbackData: "course_info",
						},
						{
							Text:         "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å",
							CallbackData: "purchase_course",
						},
					}},
				},
			})
			return err
		default:
			text = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É: [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/vibecodinghub1)"
		}
	}

	_, err = ctx.EffectiveMessage.Reply(bot, text, &gotgbot.SendMessageOpts{
		ParseMode: "Markdown",
	})
	return err
}

func (b *Bot) handleHelp(bot *gotgbot.Bot, ctx *ext.Context) error {
	text := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`

	_, err := ctx.EffectiveMessage.Reply(bot, text, nil)
	return err
}

func (b *Bot) handleCallbackQuery(bot *gotgbot.Bot, ctx *ext.Context) error {
	log.Printf("Processing callback query with data: %s", ctx.CallbackQuery.Data)

	switch ctx.CallbackQuery.Data {
	case "check_subscription":
		channelID, _ := strconv.ParseInt(b.channelID, 10, 64)
		chatMember, err := bot.GetChatMember(channelID, ctx.CallbackQuery.From.Id, nil)

		var text string
		if err != nil || chatMember.GetStatus() == "left" || chatMember.GetStatus() == "kicked" {
			text = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É."
		} else {
			text = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:", ctx.EffectiveUser.FirstName)

			_, _, err = ctx.CallbackQuery.Message.EditText(bot, text, &gotgbot.EditMessageTextOpts{
				ReplyMarkup: gotgbot.InlineKeyboardMarkup{
					InlineKeyboard: [][]gotgbot.InlineKeyboardButton{{
						{
							Text:         "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ",
							CallbackData: "course_info",
						},
						{
							Text:         "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å",
							CallbackData: "purchase_course",
						},
					}},
				},
			})
			return err
		}

		_, err = ctx.CallbackQuery.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{
			Text: text,
		})
		return err

	case "course_info":
		courses, err := b.repo.ListCourses()
		if err != nil {
			log.Printf("Error getting courses: %v", err)
			return err
		}

		if len(courses) == 0 {
			log.Printf("No courses available")
			return fmt.Errorf("no courses available")
		}

		course := courses[0]
		text := fmt.Sprintf("*–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ*\n\n"+
			"*%s*\n\n%s\n\n"+
			"*–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:*\n"+
			"‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞\n"+
			"‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"+
			"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫—É –∫—É—Ä–∞—Ç–æ—Ä–æ–≤\n"+
			"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏\n\n"+
			"–¶–µ–Ω–∞: %.2f —Ä—É–±.", course.Title, course.Description, course.Price)

		_, err = bot.SendMessage(ctx.EffectiveChat.Id, text, &gotgbot.SendMessageOpts{
			ParseMode: "Markdown",
			ReplyMarkup: gotgbot.InlineKeyboardMarkup{
				InlineKeyboard: b.keyboards.CourseDetailMenu(),
			},
		})
		if err != nil {
			log.Printf("Error sending message: %v", err)
			return err
		}

		_, err = ctx.CallbackQuery.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{
			Text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
		})
		return err

	default:
		log.Printf("Unknown callback data: %s", ctx.CallbackQuery.Data)
		return nil
	}
}

func (b *Bot) handleCourse(bot *gotgbot.Bot, ctx *ext.Context) error {
	courses, err := b.repo.ListCourses()
	if err != nil {
		log.Printf("Error getting courses: %v", err)
		_, err = ctx.EffectiveMessage.Reply(bot, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ", nil)
		return err
	}

	if len(courses) == 0 {
		_, err = ctx.EffectiveMessage.Reply(bot, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤", nil)
		return err
	}

	course := courses[0] // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å
	text := fmt.Sprintf("*%s*\n\n%s\n\n–¶–µ–Ω–∞: %.2f —Ä—É–±.",
		course.Title, course.Description, course.Price)

	_, err = ctx.EffectiveMessage.Reply(bot, text, &gotgbot.SendMessageOpts{
		ParseMode: "Markdown",
		ReplyMarkup: gotgbot.InlineKeyboardMarkup{
			InlineKeyboard: b.keyboards.CourseMenu(),
		},
	})
	return err
}
